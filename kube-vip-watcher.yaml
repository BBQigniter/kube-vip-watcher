apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-vip-watcher
  namespace: monitoring
  labels:
    app: kube-vip-watcher
spec:
  # no need to run it multiple times!
  replicas: 1
  selector:
    matchLabels:
      app: kube-vip-watcher
  template:
    metadata:
      labels:
        app: kube-vip-watcher
    spec:
      containers:
      - image: my-repo.home.arpa/kube-vip-watcher:v0.10
        name: kube-vip-watcher
        livenessProbe:
          failureThreshold: 3
          exec:
            command:
            - /opt/script/kube-vip-watcher/healthchecks/liveness.py
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        readinessProbe:
          failureThreshold: 3
          exec:
            command:
            - /opt/script/kube-vip-watcher/healthchecks/readiness.py
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 2
          timeoutSeconds: 2
        resources:
          requests:
            memory: 64Mi
            cpu: 0.1
          limits:
            # so the workload cannot take all the resources if something goes wrong
            memory: 128Mi
            cpu: 1
        volumeMounts:
        - name: kube-vip-watcher-log-settings-volume  # the logging-settings-file for the watcher
          mountPath: /opt/script/kube-vip-watcher/lib/settings.py
          subPath: settings.py
          readOnly: true
      serviceAccountName: kube-vip-watcher
      #imagePullSecrets:
      #- name: your-secret
      volumes:
      - name: kube-vip-watcher-log-settings-volume
        configMap:
          name: kube-vip-watcher-log-settings-configmap
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-vip-watcher
rules:
- apiGroups:
  - ""  # "" indicates the core API group
  - "coordination.k8s.io"
  resources:
  - pods
  - namespaces
  - services
  - leases
  - nodes/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""  # "" indicates the core API group
  - "coordination.k8s.io"
  resources:
  - services
  - leases
  verbs:
  - create
  - update
  - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-vip-watcher
  namespace: monitoring
secrets:
- name: kube-vip-watcher-token
---
# needed for clusters with v1.24+
apiVersion: v1
kind: Secret
metadata:
  name: kube-vip-watcher-token
  namespace: monitoring
  annotations:
    kubernetes.io/service-account.name: kube-vip-watcher
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-vip-watcher
subjects:
- kind: ServiceAccount
  name: kube-vip-watcher
  namespace: monitoring
roleRef:
  kind: ClusterRole
  name: kube-vip-watcher
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-vip-watcher-log-settings-configmap
  namespace: monitoring
data:
  settings.py: |
    import __main__
    import os
    import socket
    import json
    
    # we get the filename from the main calling script
    # ATTENTION: if you override this in your main program/script, you also have to override
    # the log_format variables! else the override won't have any effect
    global_process_name = str(os.path.basename(__main__.__file__))
    
    # settings that may be used in all other classes
    # currently one of the following levels may be chosen: "info", "warning", "debug", "error", "critical"
    global_log_level = "info"
    
    # set either "string" or "json"
    global_log_format_type = "json"
    
    if global_log_format_type == "string":
        global_set_log_format = "%(asctime)s " + socket.gethostname() + " " + global_process_name + "[%(process)d]: MODULE: %(name)s LEVEL: %(levelname)s MESSAGE: %(message)s"
    else:
        # "Elastic Common Schema" compatible
        global_set_log_format = {
            "@timstamp": "%(asctime)s",
            "host": {
                "name": socket.gethostname()
            },
            "process": {
                "name": global_process_name,
                "id": "%(process)d",
                "module": "%(name)s"
            },
            "log": {
                "level": "%(levelname)s"
            },
            "message": "%(message)s"
        }
        global_set_log_format = json.dumps(global_set_log_format)
    # endif
    
    # the log format shown on the console
    # attributes: https://docs.python.org/2/library/logging.html#logrecord-attributes
    # global_log_format = "%(asctime)s " + socket.gethostname() + " " + global_process_name + "[%(process)d]: MODULE: %(name)s LEVEL: %(levelname)s MESSAGE: %(message)s"
    global_log_format = global_set_log_format
    
    # Set a default log-file - if "disabled" no logfile is written! else give a full-path e.g.: /logs/example.log
    global_log_file_path = "disabled"
    # the log format written to a file
    # global_log_file_format = "%(asctime)s " + socket.gethostname() + " " + global_process_name + "[%(process)d]: MODULE: %(name)s LEVEL: %(levelname)s MESSAGE: %(message)s"
    global_log_file_format = global_set_log_format
    
    # send syslog messages
    # set to True or False to enable or disable logging to the given syslog-server
    # the global_log_format will be used
    global_log_server_enable = False
    global_log_server = ("127.0.0.1", 1514)  # IP/FQDN and port (UDP)
    # the log format for syslog messages
    # global_log_server_format = "%(asctime)s " + socket.gethostname() + " " + global_process_name + "[%(process)d]: MODULE: %(name)s LEVEL: %(levelname)s MESSAGE: %(message)s"
    global_log_server_format = global_set_log_format
